{
  parserClass="com.github.justinespinosa.intellicob.parser.CobolParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cobol"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.justinespinosa.intellicob.psi"
  psiImplPackage="com.github.justinespinosa.intellicob.psi.impl"

  elementTypeHolderClass="com.github.justinespinosa.intellicob.psi.CobolTypes"
  elementTypeClass="com.github.justinespinosa.intellicob.psi.CobolElementType"
  tokenTypeClass="com.github.justinespinosa.intellicob.psi.CobolTokenType"
  tokenTypeFactory="CobolTokenTypeFactory.createTokenType"

}

//GRAMMAR of HP NonStop COBOL for TNS/E
cobolFile ::= cobol_program_+

private independant_tokens_ ::= COMMENT COMMENT_INDICATOR PAGE_INDICATOR CODE_INDICATOR
PREPROCESSOR_INDICATOR PREPROCESSOR COPY_PREPROCESSOR REPLACE_PREPROCESSOR EMBEDDED_SQL

cobol_source ::= cobol_program_+
cobol_program_ ::= identification_division_
 [environment_division_]
 data_division_
 procedure_division_
 cobol_program_*
 [end_program_]

//*******************************
// IDENTIFICATION DIVISION
//*******************************
identification_division_ ::= IDENTIFICATION DIVISION DOT
program_id_
[author_]
[installation_]
[date_written_]
[date_compiled_]
[security_]

end_program_ ::= END PROGRAM DOT COBOLWORD DOT

//################
program_id_     ::= PROGRAM_ID DOT COBOLWORD DOT
author_         ::= AUTHOR DOT [COMMENT_ENTRY]
installation_   ::= INSTALLATION DOT [COMMENT_ENTRY]
date_written_   ::= DATE-WRITTEN DOT [COMMENT_ENTRY]
date_compiled_  ::= DATE-COMPILED DOT [COMMENT_ENTRY]
security_       ::= SECURITY DOT [COMMENT_ENTRY]

//*******************************
//ENVIRONMENT DIVISION
//*******************************
environment_division_ ::= ENVIRONMENT DIVISION DOT
[configuration_section_]
[input_output_section_]

//*******************************
// -> Configuration section
configuration_section_ ::= CONFIGURATION SECTION DOT
[source_computer_]
[object_computer_]
[special_names_]

//################
source_computer_ ::= SOURCE_COMPUTER DOT COMPUTER_NAME [ [WITH] DEBUGGING MODE ] DOT

//################
object_computer_ ::= OBJECT_COMPUTER DOT COMPUTER_NAME
 [memory_size_]
 [program_collating_sequence_]
 [segment_limit_]
 [character_set_]
 DOT
memory_size_                ::= MEMORY [SIZE] INTEGER_ (WORDS|MODULES|CHARACTERS)
program_collating_sequence_ ::= [PROGRAM] [COLLATING] SEQUENCE [IS] COBOLWORD
segment_limit_              ::= SEGMENT_LIMIT [IS] INTEGER_
character_set_              ::= CHARACTER_SET [IS] (DANSK-NORSK|DEUTSCH|ESPANOL|FRANCAIS-AZ|FRANCAIS-QW|SVENSK-SUOMI|UK|USASCII)

//################
special_names_ ::= SPECIAL_NAMES DOT
[system_name_ +]
[file_mnemonic_ +]
[alphabet_ +]
[symbolic_characters_ +]
[class_ +]
[currency_sign_]
[decimal_point_]
DOT
system_name_ ::= COBOLWORD [status_phrase_] IS COBOLWORD [status_phrase_]
status_phrase_ ::= (ON [STATUS] [IS] COBOLWORD [OFF [STATUS] [IS] COBOLWORD]|OFF [STATUS] [IS] COBOLWORD [ON [STATUS] [IS] COBOLWORD])
file_mnemonic_::= (COBOLWORD|FILE file_name_ IS COBOLWORD)
alphabet_ ::= ALPHABET COBOLWORD [IS] [STANDARD-1][STANDARD-2][NATIVE][EBCDIC][literal_phrase_]
symbolic_characters_ ::= SYMBOLIC [CHARACTERS] character_list_+
character_list_ ::= COBOLWORD (IS|ARE) INTEGER_ IN COBOLWORD
class_ ::= CLAZZ COBOLWORD IS literal_phrase_+
currency_sign_ ::= CURRENCY [SIGN] [IS] STRING
decimal_point_ ::= DECIMAL_POINT [IS] COMMA
literal_phrase_ ::= literal_ (THROUGH|THRU|ALSO) literal_

//*******************************
// -> input-output section
input_output_section_ ::= INPUT-OUTPUT SECTION DOT
[file_control_]
[io_control_]
[receive_control_]

//################
file_control_ ::= FILE-CONTROL DOT file_control_clause_+
file_control_clause_ ::= select_ assign_
 [reserve_]
 [organization_]
 [padding_character_]
 [record_delimiter_]
 [access_mode_]
 [alternate_record_key_+]
 [record_key_]
 [file_status_]
 DOT
select_ ::= SELECT [OPTIONAL] COBOLWORD
assign_ ::= ASSIGN [TO] file_name_
reserve_ ::= RESERVE INTEGER_ (AREA|AREAS)
organization_ ::= [ORGANIZATION] [IS] ([LINE] SEQUENTIAL|RELATIVE|INDEXED)
padding_character_ ::= PADDING [CHARACTER] [IS] identifier_or_literal_
record_delimiter_ ::= RECORD DELIMITER [IS] (STANDARD-1|identifier_or_literal_)
access_mode_ ::= ACCESS [MODE] [IS] (SEQUENTIAL|RANDOM|DYNAMIC) [RELATIVE [KEY] [IS] identifier_]
alternate_record_key_ ::= ALTERNATE RECORD [KEY] [IS] identifier_ [[WITH] DUPLICATES]
record_key_ ::= RECORD [KEY] [IS] identifier_
file_status_ ::=  [FILE] STATUS [IS] identifier_

//################
io_control_ ::= I-O-CONTROL DOT
[[rerun_+]
 [same_area_+]
 [multiple_file_+]
 DOT]
rerun_ ::= RERUN [ON file_name_ ] EVERY (rerun2_|identifier_or_literal_ [CLOCK-UNITS])
rerun2_ ::= (identifier_or_literal_ RECORDS|[END] [OF] (REEL|UNIT) OR file_name_)
same_area_ ::= SAME [(RECORD|SORT|MERGE)] [AREA] [FOR] file_name_+
multiple_file_ ::= MULTIPLE FILE [TAPE] [CONTAINS] (COBOLWORD [POSITION identifier_or_literal_])+

//################
receive_control_ ::= RECEIVE-CONTROL DOT
[external_]
[table_occurs_]
[syncdepth_limit_]
[reply_contains_]
[error_code_]
[message_source_]
[report_]
DOT
external_ ::= W_EXTERNAL
table_occurs_ ::= TABLE OCCURS INTEGER_ [EXTENDED-STORAGE] [TIMES]
syncdepth_limit_ ::= SYNCDEPTH [LIMIT] [IS] INTEGER_
reply_contains_ ::= REPLY [CONTAINS] (INTEGER_ [CHARACTERS]|file_name_ [RECORD])
error_code_ ::= ERROR [CODE] [IS] identifier_
message_source_ ::= [MESSAGE] SOURCE [IS] identifier_
report_ ::= REPORT (COBOLWORD [MESSAGES])+

//*******************************
//DATA DIVISION
//*******************************
data_division_ ::= DATA DIVISION DOT
[file_section_]
[working_storage_section_]
[extended_storage_section_]
[linkage_sections_]

//*******************************
//Sections
file_section_ ::= FILE SECTION DOT (data_item_|file_description_)*
working_storage_section_ ::= WORKING-STORAGE SECTION DOT data_item_*
extended_storage_section_ ::= EXTENDED-STORAGE SECTION DOT data_item_*
linkage_sections_ ::=  LINKAGE SECTION DOT data_item_*

//################
file_description_ ::= (FD|SD) COBOLWORD
(external2_
|global_
|block_contains_
|record_contains_
|label_records_
|value_of_
|data_records_
|linage_
|code_set_
|report2_)+
DOT
external2_ ::= [IS] W_EXTERNAL
global_ ::= [IS] GLOBAL
block_contains_ ::= BLOCK [CONTAINS] INTEGER_ [TO INTEGER_] (RECORDS|CHARACTERS)
record_contains_ ::= RECORD (contains_fix_|contains_varying_)
contains_fix_ ::= [CONTAINS] INTEGER_ [TO INTEGER_] [CHARACTERS]
contains_varying_ ::= [IS] VARYING [IN] [SIZE] ([FROM] INTEGER_ [TO INTEGER_] [CHARACTERS]|DEPENDING [ON] identifier_)
label_records_ ::= LABEL (RECORD [IS]|RECORDS [ARE]) (STANDARD|OMITTED)
value_of_ ::= VALUE OF (COBOLWORD [OF] identifier_or_literal_)+
data_records_ ::= DATA RECORDS (RECORD [IS]|RECORDS [ARE]) COBOLWORD+
linage_ ::= LINAGE [IS] identifier_or_literal_ [LINES] [[WITH] FOOTING [AT] identifier_or_literal_] [[LINES] [AT] (TOP|BOTTOM) identifier_or_literal_]
code_set_ ::= CODE-SET [IS] COBOLWORD
report2_ ::= (REPORT [IS]|REPORTS [ARE]) COBOLWORD

//################
data_item_ ::= INTEGER_ (COBOLWORD|FILLER) [data_type_description_] DOT
data_type_description_ ::= (redefines_
 |external2_
 |global_
 |picture_
 |usage_
 |sign_
 |occurs_
 |synchronized_
 |justified_
 |blank_when_zero_
 |value_)*
redefines_ ::= REDEFINES COBOLWORD
picture_ ::= (PICTURE|PIC) [IS] PICTURE_STRING
usage_ ::= [USAGE] [IS] (BINARY|COMPUTATIONAL|COMP|COMPUTATIONAL-3|COMP-3|COMPUTATIONAL-5|COMP-5|DISPLAY|INDEX|NATIVE-2|NATIVE-4|NATIVE-8|PACKED-DECIMAL|POINTER)
sign_ ::= [SIGN][IS] (LEADING|TRAILING) [SEPARATE [CHARACTER]]
occurs_ ::= OCCURS INTEGER_ [TO INTEGER_] [TIMES] [DEPENDING [ON] identifier_] key_order_* [INDEXED [BY] COBOLWORD+]
key_order_ ::= (ASCENDING|DESCENDING) [KEY] [IS] COBOLWORD+
synchronized_ ::= (SYNCHRONIZED|SYNC) [(LEFT|RIGHT)]
justified_ ::= (JUSTIFIED|JUST) [RIGHT]
blank_when_zero_ ::= BLANK [WHEN] ZERO
value_  ::= VALUE [IS] (literal_phrase_|literal_)+

//*******************************
//PROCEDURE DIVISION
//*******************************
procedure_division_ ::= PROCEDURE DIVISION [using_] DOT [declaratives_] sentence_*

declaratives_ ::= DECLARATIVES DOT sentence_* END DECLARATIVES DOT

sentence_ ::= (instruction_* DOT|paragraph_header_)

paragraph_header_ ::= paragraph_name_ [SECTION [INTEGER_]] DOT

instruction_ ::= (accept_|add_|alter_|call_|cancel_|checkpoint_|close_|compute_|continue_
|delete_|display_|divide_|enter_|enter_cobol_|evaluate_|exit_|free_|goto_|if_|initialize_|inspect_
|lockfile_|merge_|move_|multiply_|open_|perform_|read_|release_|return_|rewrite_
|search_|set_|sort_|start_|startbackup_|stop_|string_|subtract_|unlockfile_|unlockrecord_
|unstring_|use_|write_)

//*******************************
//VERBS of the procedure division
accept_ ::= ACCEPT identifier_ [FROM (COBOLWORD|DATE [YYYYMMDD]|DAY [YYYYDDD]|DAY-OF-WEEK|TIME)]
add_ ::= ADD [CORR|CORRESPONDING] identifier_or_literal_+ [TO (identifier_or_literal_ [ROUNDED])+] GIVING (identifier_ [ROUNDED])+ size_error_clause_ [END-ADD]
alter_ ::= ALTER (paragraph_name_ TO [PROCEED TO] paragraph_name_)+
call_ ::= CALL cobolword_or_literal_ [(IN|OF) file_name_] [using2_] [on_not_on_] [on_exception_] [END-CALL]
cancel_ ::= CANCEL identifier_
checkpoint_ ::= CHECKPOINT ([(FILE|QUEUE)] (file_name_|identifier_) )+
close_ ::= CLOSE file_name_ [((UNIT|REEL)[FOR REMOVAL]|[WITH](LOCK|NO REWIND))]
compute_ ::= COMPUTE (identifier_ [ROUNDED])+ EQUAL_SIGN_ expression_arithmetic_ size_error_clause_ [END-COMPUTE]
continue_ ::= CONTINUE
//copy is handeld by the lexer as it should return one token to be understood as comment because it is a preprocessor directive
delete_ ::= DELETE file_name_ [RECORD] invalid_key_clause_ [END-DELETE]
display_ ::= DISPLAY identifier_or_literal_+ [UPON COBOLWORD] [[WITH] NO ADVANCING]
divide_ ::= DIVIDE identifier_or_literal_+ [(INTO|BY) (identifier_or_literal_ [ROUNDED])+] [GIVING (identifier_ [ROUNDED])+] [REMAINDER identifier_] size_error_clause_ [END-DIVIDE]
enter_ ::= ENTER (STRING|COBOLWORD) cobolword_or_literal_ [(IN|OF) file_name_] [using3_] [GIVING identifier_]
enter_cobol_ ::= ENTER COBOL DOT
evaluate_ ::= //TODO
exit_ ::= EXIT [(PROGRAM|PARAGRAPH|SECTION|PERFORM [CYCLE])]
free_ ::= FREE identifier_
goto_ ::= GO [TO] paragraph_name_+ [DEPENDING ON identifier_]
if_ ::= //TODO
initialize_ ::= //TODO
inspect_ ::= //TODO
lockfile_ ::= //TODO
merge_ ::= //TODO
move_ ::= /*TODO: finish .. */ MOVE [CORR|CORRESPONDING] identifier_or_literal_+ TO identifier_or_literal_
multiply_ ::= //TODO
open_ ::= //TODO
perform_ ::= /*TODO: finish .. */ PERFORM paragraph_name_
read_ ::= //TODO
release_ ::= //TODO
//replace is like copy
return_ ::= //TODO
rewrite_ ::= //TODO
search_ ::= //TODO
set_ ::= //TODO
sort_ ::= //TODO
start_ ::= //TODO
startbackup_ ::= //TODO
stop_ ::= //TODO
string_ ::= //TODO
subtract_ ::= //TODO
unlockfile_ ::= //TODO
unlockrecord_ ::= //TODO
unstring_ ::= //TODO
use_ ::= //TODO
write_ ::= //TODO

//*******************************
//Rules common to multiple procedure division verbs or sub-rules

expression_arithmetic_ ::= expression_times_div_ { ( PLUS_SIGN_ | MINUS_SIGN_ ) expression_times_div_ }*
expression_times_div_ ::= expression_power_ { ( TIMES_SIGN_ | DIVIDE_SIGN_ ) expression_power_ }*
expression_power_ ::=	[ ( MINUS_SIGN_ | PLUS_SIGN_ ) ] expression_basis { POWER_SIGN_ expression_basis }*
expression_basis	::=	( identifier_or_literal_ | OPAREN_SIGN_ expression_arithmetic_ CPAREN_SIGN_ )

on_exception_ ::= [ON] (EXCEPTION|OVERFLOW) instruction_
on_not_on_ ::= on_exception_ [NOT [ON] EXCEPTION instruction_+]
invalid_key_clause_ ::= [INVALID [KEY]  instruction_] [NOT INVALID [KEY] instruction_]
size_error_clause_ ::= [[ON] SIZE ERROR instruction_] [NOT [ON] SIZE ERROR instruction_]
using_ ::= USING identifier_+
using2_ ::= USING ([ [BY] (REFERENCE|CONTENT|VALUE) ] identifier_+ )+
using3_ ::= USING (identifier_|literal_|OPAREN_SIGN_ expression_arithmetic_ CPAREN_SIGN_|OMITTED)+

//*******************************
//General tokens
paragraph_name_ ::= COBOLWORD
file_name_ ::= (GUARDIAN_FILE|COBOLWORD|DEFINE|STRING)
literal_ ::= [ALL] literal_values_
literal_values_ ::= (INTEGER_|NUMBER_|STRING|ZERO|ZEROS|ZEROES|SPACE|SPACES|
HIGH_VALUE|HIGH_VALUES|LOW_VALUE|LOW_VALUES|QUOTE|QUOTES)
cobolword_or_literal_ ::= (COBOLWORD|literal_)
identifier_ ::= COBOLWORD parent_identifier_* [subscript_]
identifier_or_literal_ ::= (identifier_|literal_)
parent_identifier_ ::= (OF|IN) COBOLWORD
subscript_ ::= OPAREN_SIGN_ identifier_or_literal_ [COLON_SIGN_ identifier_or_literal_] CPAREN_SIGN_
