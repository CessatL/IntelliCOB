{
  parserClass="com.github.justinespinosa.intellicob.parser.CobolParser"
  parserUtilClass="com.github.justinespinosa.intellicob.parser.CobolParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cobol"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.justinespinosa.intellicob.psi"
  psiImplPackage="com.github.justinespinosa.intellicob.psi.impl"

  elementTypeHolderClass="com.github.justinespinosa.intellicob.psi.CobolTypes"
  elementTypeClass="com.github.justinespinosa.intellicob.psi.CobolElementType"
  tokenTypeClass="com.github.justinespinosa.intellicob.psi.CobolTokenType"
  tokenTypeFactory="CobolTokenTypeFactory.createTokenType"

  extends("paragraph_") ="com.github.justinespinosa.intellicob.psi.CobolParagraphElement"
  extends("section_") ="com.github.justinespinosa.intellicob.psi.CobolParagraphElement"
  extends("declaratives_section_") ="com.github.justinespinosa.intellicob.psi.CobolParagraphElement"
  extends("paragraph_name_") ="com.github.justinespinosa.intellicob.psi.CobolParagraphNameElement"

}

//GRAMMAR of HP NonStop COBOL for TNS/E
cobolFile ::= cobol_program_+

private independant_tokens_ ::= COMMENT COMMENT_INDICATOR PAGE_INDICATOR CODE_INDICATOR
PREPROCESSOR_INDICATOR PREPROCESSOR COPY_PREPROCESSOR REPLACE_PREPROCESSOR EMBEDDED_SQL

cobol_source ::= cobol_program_+
cobol_program_ ::= identification_division_
 [environment_division_]
 data_division_
 procedure_division_
 cobol_program_*
 [end_program_]

//*******************************
// IDENTIFICATION DIVISION
//*******************************
identification_division_ ::= IDENTIFICATION DIVISION DOT
program_id_
[author_]
[installation_]
[date_written_]
[date_compiled_]
[security_]

end_program_ ::= END PROGRAM DOT COBOLWORD DOT

//################
program_id_     ::= PROGRAM_ID DOT program_id_name_ DOT
program_id_name_::= COBOLWORD
author_         ::= AUTHOR DOT [COMMENT_ENTRY]
installation_   ::= INSTALLATION DOT [COMMENT_ENTRY]
date_written_   ::= DATE-WRITTEN DOT [COMMENT_ENTRY]
date_compiled_  ::= DATE-COMPILED DOT [COMMENT_ENTRY]
security_       ::= SECURITY DOT [COMMENT_ENTRY]

//*******************************
//ENVIRONMENT DIVISION
//*******************************
environment_division_ ::= ENVIRONMENT DIVISION DOT
[configuration_section_]
[input_output_section_]

//*******************************
// -> Configuration section
configuration_section_ ::= CONFIGURATION SECTION DOT
[source_computer_]
[object_computer_]
[special_names_]

//################
source_computer_ ::= SOURCE_COMPUTER DOT COMPUTER_NAME [ [WITH] DEBUGGING MODE ] DOT

//################
object_computer_ ::= OBJECT_COMPUTER DOT COMPUTER_NAME
 [memory_size_]
 [program_collating_sequence_]
 [segment_limit_]
 [character_set_]
 DOT
private memory_size_                ::= MEMORY [SIZE] INTEGER_ (WORDS|MODULES|CHARACTERS)
private program_collating_sequence_ ::= [PROGRAM] [COLLATING] SEQUENCE [IS] COBOLWORD
private segment_limit_              ::= SEGMENT_LIMIT [IS] INTEGER_
private character_set_              ::= CHARACTER_SET [IS] (DANSK-NORSK|DEUTSCH|ESPANOL|FRANCAIS-AZ|FRANCAIS-QW|SVENSK-SUOMI|UK|USASCII)

//################
special_names_ ::= SPECIAL_NAMES DOT
[system_name_ +]
[file_mnemonic_ +]
[alphabet_ +]
[symbolic_characters_ +]
[class_ +]
[currency_sign_]
[decimal_point_]
DOT
private system_name_ ::= COBOLWORD [status_phrase_] IS COBOLWORD [status_phrase_]
private status_phrase_ ::= (ON [STATUS] [IS] COBOLWORD [OFF [STATUS] [IS] COBOLWORD]|OFF [STATUS] [IS] COBOLWORD [ON [STATUS] [IS] COBOLWORD])
private file_mnemonic_::= (COBOLWORD|FILE file_name_ IS COBOLWORD)
private alphabet_ ::= ALPHABET COBOLWORD [IS] [STANDARD-1][STANDARD-2][NATIVE][EBCDIC][literal_phrase_]
private symbolic_characters_ ::= SYMBOLIC [CHARACTERS] character_list_+
private character_list_ ::= COBOLWORD (IS|ARE) INTEGER_ IN COBOLWORD
private class_ ::= CLAZZ COBOLWORD IS literal_phrase_+
private currency_sign_ ::= CURRENCY [SIGN] [IS] STRING_LITERAL
private decimal_point_ ::= DECIMAL_POINT [IS] COMMA
private literal_phrase_ ::= literal_ (THROUGH|THRU|ALSO) literal_

//*******************************
// -> input-output section
input_output_section_ ::= INPUT-OUTPUT SECTION DOT
[file_control_]
[io_control_]
[receive_control_]

//################
file_control_ ::= FILE-CONTROL DOT file_control_clause_+
file_control_clause_ ::= select_ assign_
 [reserve_]
 [organization_]
 [padding_character_]
 [record_delimiter_]
 [access_mode_]
 [alternate_record_key_+]
 [record_key_]
 [file_status_]
 DOT
private select_ ::= SELECT [OPTIONAL] COBOLWORD
private assign_ ::= ASSIGN [TO] file_name_
private reserve_ ::= RESERVE INTEGER_ (AREA|AREAS)
private organization_ ::= [ORGANIZATION] [IS] ([LINE] SEQUENTIAL|RELATIVE|INDEXED)
private padding_character_ ::= PADDING [CHARACTER] [IS] identifier_or_literal_
private record_delimiter_ ::= RECORD DELIMITER [IS] (STANDARD-1|identifier_or_literal_)
private access_mode_ ::= ACCESS [MODE] [IS] (SEQUENTIAL|RANDOM|DYNAMIC) [RELATIVE [KEY] [IS] identifier_]
private alternate_record_key_ ::= ALTERNATE RECORD [KEY] [IS] identifier_ [[WITH] DUPLICATES]
private record_key_ ::= RECORD [KEY] [IS] identifier_
private file_status_ ::=  [FILE] STATUS [IS] identifier_

//################
io_control_ ::= I-O-CONTROL DOT
[[rerun_+]
 [same_area_+]
 [multiple_file_+]
 DOT]
private rerun_ ::= RERUN [ON file_name_ ] EVERY (rerun2_|identifier_or_literal_ [CLOCK-UNITS])
private rerun2_ ::= (identifier_or_literal_ RECORDS|[END] [OF] (REEL|UNIT) OR file_name_)
private same_area_ ::= SAME [(RECORD|SORT|MERGE)] [AREA] [FOR] file_name_+
private multiple_file_ ::= MULTIPLE FILE [TAPE] [CONTAINS] (COBOLWORD [POSITION identifier_or_literal_])+

//################
receive_control_ ::= RECEIVE-CONTROL DOT
[external_]
[table_occurs_]
[syncdepth_limit_]
[reply_contains_]
[error_code_]
[message_source_]
[report_]
DOT
private external_ ::= W_EXTERNAL
private table_occurs_ ::= TABLE OCCURS INTEGER_ [EXTENDED-STORAGE] [TIMES]
private syncdepth_limit_ ::= SYNCDEPTH [LIMIT] [IS] INTEGER_
private reply_contains_ ::= REPLY [CONTAINS] (INTEGER_ [CHARACTERS]|file_name_ [RECORD])
private error_code_ ::= ERROR [CODE] [IS] identifier_
private message_source_ ::= [MESSAGE] SOURCE [IS] identifier_
private report_ ::= REPORT (COBOLWORD [MESSAGES])+

//*******************************
//DATA DIVISION
//*******************************
data_division_ ::= DATA DIVISION DOT
[file_section_]
[working_storage_section_]
[extended_storage_section_]
[linkage_section_]

//*******************************
//Sections
file_section_ ::= FILE SECTION DOT (data_item_|file_description_)*
working_storage_section_ ::= WORKING-STORAGE SECTION DOT (data_item_|DOT)*
extended_storage_section_ ::= EXTENDED-STORAGE SECTION DOT (data_item_|DOT)*
linkage_section_ ::=  LINKAGE SECTION DOT (data_item_|DOT)*

//################
file_description_ ::= (FD|SD) COBOLWORD
(external2_
|global_
|block_contains_
|record_contains_
|label_records_
|value_of_
|data_records_
|linage_
|code_set_
|report2_)+
DOT
private external2_ ::= [IS] W_EXTERNAL
private global_ ::= [IS] GLOBAL
private block_contains_ ::= BLOCK [CONTAINS] INTEGER_ [TO INTEGER_] (RECORDS|CHARACTERS)
private record_contains_ ::= RECORD (contains_fix_|contains_varying_)
private contains_fix_ ::= [CONTAINS] INTEGER_ [TO INTEGER_] [CHARACTERS]
private contains_varying_ ::= [IS] VARYING [IN] [SIZE] ([FROM] INTEGER_ [TO INTEGER_] [CHARACTERS]|DEPENDING [ON] identifier_)
private label_records_ ::= LABEL (RECORD [IS]|RECORDS [ARE]) (STANDARD|OMITTED)
private value_of_ ::= VALUE OF (COBOLWORD [OF] identifier_or_literal_)+
private data_records_ ::= DATA RECORDS (RECORD [IS]|RECORDS [ARE]) COBOLWORD+
private linage_ ::= LINAGE [IS] identifier_or_literal_ [LINES] [[WITH] FOOTING [AT] identifier_or_literal_] [[LINES] [AT] (TOP|BOTTOM) identifier_or_literal_]
private code_set_ ::= CODE-SET [IS] COBOLWORD
private report2_ ::= (REPORT [IS]|REPORTS [ARE]) COBOLWORD

//################
data_item_ ::= data_item_level_ data_item_rest_ {data_item_sub_level_ data_item_rest_}*
private data_item_rest_ ::= data_item_name_ [data_type_description_] DOT
external data_item_level_ ::= variableLevel
external data_item_sub_level_ ::= lowerVariableLevel
data_item_name_ ::= (COBOLWORD|FILLER)
data_type_description_ ::= (redefines_
 |external2_
 |global_
 |picture_
 |usage_
 |sign_
 |occurs_
 |synchronized_
 |justified_
 |blank_when_zero_
 |value_)*
private redefines_ ::= REDEFINES COBOLWORD
private picture_ ::= (PICTURE|PIC) [IS] PICTURE_STRING
private usage_ ::= [USAGE] [IS] (BINARY|COMPUTATIONAL|COMP|COMPUTATIONAL-3|COMP-3|COMPUTATIONAL-5|COMP-5|DISPLAY|INDEX|NATIVE-2|NATIVE-4|NATIVE-8|PACKED-DECIMAL|POINTER)
private sign_ ::= [SIGN][IS] (LEADING|TRAILING) [SEPARATE [CHARACTER]]
private occurs_ ::= OCCURS INTEGER_ [TO INTEGER_] [TIMES] [DEPENDING [ON] identifier_] key_order_* [INDEXED [BY] COBOLWORD+]
private key_order_ ::= (ASCENDING|DESCENDING) [KEY] [IS] COBOLWORD+
private synchronized_ ::= (SYNCHRONIZED|SYNC) [(LEFT|RIGHT)]
private justified_ ::= (JUSTIFIED|JUST) [RIGHT]
private blank_when_zero_ ::= BLANK [WHEN] ZERO
private value_  ::= (VALUE [IS]|VALUES [ARE]) (literal_phrase_|literal_)+

//*******************************
//PROCEDURE DIVISION
//*******************************
procedure_division_ ::= PROCEDURE DIVISION [using_] DOT [declaratives_] (paragraph_|section_)+
declaratives_ ::= DECLARATIVES DOT (declaratives_section_)+ END DECLARATIVES DOT

declaratives_section_ ::= paragraph_name_ SECTION [INTEGER_] DOT use_ (paragraph_|sentence_)*

section_ ::= paragraph_name_ SECTION [INTEGER_] DOT (paragraph_|sentence_)*
paragraph_ ::= paragraph_name_ DOT sentence_*
sentence_ ::= (instruction_* DOT)

instruction_ ::= (accept_|add_|alter_|call_|cancel_|checkpoint_|close_|compute_|continue_
|delete_|display_|divide_|enter_|enter_cobol_|evaluate_|exit_|free_|goto_|if_|initialize_|inspect_
|lockfile_|merge_|move_|multiply_|open_|perform_|read_|release_|return_|rewrite_
|search_|set_|sort_|start_|startbackup_|stop_|string_|subtract_|unlockfile_|unlockrecord_
|unstring_|use_|write_)

//*******************************
//VERBS of the procedure division
accept_ ::= ACCEPT identifier_ [FROM (COBOLWORD|DATE [YYYYMMDD]|DAY [YYYYDDD]|DAY-OF-WEEK|TIME)]
add_ ::= ADD [CORR|CORRESPONDING] identifier_or_literal_+ [TO (identifier_or_literal_ [ROUNDED])+] [GIVING (identifier_ [ROUNDED])+ ] size_error_clause_ [END-ADD]
alter_ ::= ALTER (paragraph_name_ TO [PROCEED TO] paragraph_name_)+
call_ ::= CALL cobolword_or_literal_ [(IN|OF) file_name_] [using2_] [on_not_on_] [on_exception_] [END-CALL]
cancel_ ::= CANCEL identifier_
checkpoint_ ::= CHECKPOINT ([(FILE|QUEUE)] (file_name_|identifier_) )+
close_ ::= CLOSE file_name_ [((UNIT|REEL)[FOR REMOVAL]|[WITH](LOCK|NO REWIND))]
compute_ ::= COMPUTE (identifier_ [ROUNDED])+ EQUAL_SIGN_ expression_arithmetic_ size_error_clause_ [END-COMPUTE]
continue_ ::= CONTINUE
//copy is handeld by the lexer as it should return one token to be understood as comment because it is a preprocessor directive
delete_ ::= DELETE file_name_ [RECORD] invalid_key_clause_ [END-DELETE]
display_ ::= DISPLAY identifier_or_literal_+ [UPON COBOLWORD] [[WITH] NO ADVANCING]
divide_ ::= DIVIDE identifier_or_literal_+ [(INTO|BY) (identifier_or_literal_ [ROUNDED])+] [GIVING (identifier_ [ROUNDED])+] [REMAINDER identifier_] size_error_clause_ [END-DIVIDE]
enter_ ::= ENTER identifier_or_literal_ [identifier_or_literal_] [(IN|OF) file_name_] [using3_] [GIVING identifier_]
enter_cobol_ ::= ENTER COBOL DOT
evaluate_ ::= EVALUATE subject_list_ ((WHEN (object_list_|OTHER))+ instruction_+)+ [END-EVALUATE]
exit_ ::= EXIT [(PROGRAM|PARAGRAPH|SECTION|PERFORM [CYCLE])]
free_ ::= FREE identifier_
goto_ ::= GO [TO] paragraph_name_+ [DEPENDING ON identifier_]
if_ ::= IF condition_ [THEN] instruction_+ [ELSE instruction_+] [END-IF]
initialize_ ::= INITIALIZE identifier_ + [REPLACING ((ALPHABETIC|ALPHANUMERIC|NUMERIC|ALPHANUMERIC-EDITED|NUMERIC-EDITED) [DATA] BY identifier_or_literal_)+]
inspect_ ::= INSPECT identifier_ [tallying_][replacing_][converting_]
lockfile_ ::= LOCKFILE file_name_ [TIME LIMIT identifier_or_literal_]
merge_ ::= MERGE file_name_ key_specifier_+ [collating_sequence_] using_+ output_specifier_
move_ ::= MOVE [CORR|CORRESPONDING] identifier_or_literal_ TO identifier_or_literal_+
multiply_ ::= MULTIPLY identifier_or_literal_+ [BY (identifier_or_literal_ [ROUNDED])+] [GIVING (identifier_ [ROUNDED])+ ] size_error_clause_ [END-MULTIPLY]
open_ ::= OPEN (INPUT input_file_spec_|OUTPUT output_file_spec_|I-O io_file_spec_|EXTEND extend_file_spec_)
perform_ ::= PERFORM (perform_procedure_|perform_instructions_)
read_ ::= READ file_name_ [(NEXT|RESERVED)] [RECORD] [INTO identifier_] [[WITH] (LOCK|PROMPT identifier_)] [time_limit_] at_end_ [END-READ]
release_ ::= RELEASE identifier_ [FROM identifier_]
//replace is like copy
return_ ::= RETURN file_name_ [INTO identifier_] at_end_ [END-READ]
rewrite_ ::= REWRITE identifier_ [FROM identifier_] [[WITH] UNLOCK ] invalid_key_clause_ [END-REWRITE]
search_ ::= SEARCH (identifier_ search_varying_|ALL  identifier_ search_all_) [END-SEARCH]
set_ ::= SET (identifier_|ADDRESS OF identifier_)+ (UP [BY]|DOWN [BY]|TO) (ON|OFF|TRUE|identifier_or_literal_|ADDRESS OF identifier_|NULL|NULLS)
sort_ ::= SORT file_name_ key_specifier_+ [[WITH] DUPLICATES [IN] [ORDER]] [collating_sequence_] sort_input_specifier_ sort_output_specifier_
start_ ::= START file_name_ key_phrase_  [(APPROXIMATE|GENERIC)] [time_limit_] invalid_key_clause_ [END-START]
startbackup_ ::= STARTBACKUP identifier_or_literal_ identifier_or_literal_
stop_ ::= STOP (RUN|identifier_or_literal_)
string_ ::= STRING {identifier_or_literal_+ DELIMITED [BY] (SIZE|identifier_or_literal_)}+ INTO identifier_ [[WITH] POINTER identifier_] overflow_clause_ [END-STRING]
subtract_ ::= SUBTRACT [CORR|CORRESPONDING] identifier_or_literal_+ [FROM (identifier_or_literal_ [ROUNDED])+] [GIVING (identifier_ [ROUNDED])+ ] size_error_clause_ [END-SUBTRACT]
unlockfile_ ::= UNLOCKFILE file_name_
unlockrecord_ ::= UNLOCKRECORD file_name_
unstring_ ::= UNSTRING identifier_ [DELIMITED [BY] [ALL] identifier_or_literal_ ([OR [ALL] identifier_or_literal_])+] INTO unstring_result_+ [[WITH] POINTER identifier_] [TALLYING [IN] identifier_] overflow_clause_ [END-UNSTRING]
use_ ::= USE [GLOBAL] AFTER [STANDARD] (EXCEPTION|ERROR) PROCEDURE [ON] (file_name_|INPUT|OUTPUT|I-O|EXTEND) DOT
write_ ::= WRITE identifier_ [FROM identifier_] [advancing_clause_ end_of_page_clause_] invalid_key_clause_ [END-WRITE]

//*******************************
//Rules common to multiple procedure division verbs or sub-rules

private subject_list_ ::= subject_ (ALSO subject_)*
private subject_ ::= (identifier_or_literal_|expression_|TRUE|FALSE)
private object_list_ ::= object_ (ALSO object_)*
private object_ ::= (ANY|condition_|TRUE|FALSE|[NOT] range_)
private range_ ::= (identifier_or_literal_|expression_) [(THROUGH|TRHU) (identifier_or_literal_|expression_)]

expression_ ::= (expression_arithmetic_|expression_conditional_)

private expression_arithmetic_ ::= expression_times_div_ { ( PLUS_SIGN_ | MINUS_SIGN_ ) expression_times_div_ }*
private expression_times_div_ ::= expression_power_ { ( TIMES_SIGN_ | DIVIDE_SIGN_ ) expression_power_ }*
private expression_power_ ::= [ ( MINUS_SIGN_ | PLUS_SIGN_ ) ] expression_basis { POWER_SIGN_ expression_basis }*
private expression_basis ::= ( identifier_or_literal_ | OPAREN_SIGN_ expression_arithmetic_ CPAREN_SIGN_ )

expression_conditional_ ::= condition_
condition_ ::= combinable_condition_ { (AND|OR) combinable_condition_ }*
private combinable_condition_ ::= [NOT](simple_condition_ | parenthesis_condition_)
private simple_condition_ ::= condition_operand_ [{class_condition_|sign_condition_|relation_condition_}]
private parenthesis_condition_ ::= OPAREN_SIGN_ condition_ CPAREN_SIGN_
private class_condition_ ::=  [IS] [NOT] (NUMERIC|ALPHABETIC|ALPHABETIC-LOWER|ALPHABETIC-UPPER|COBOLWORD)
private relation_condition_	::=	relational_operator_ condition_operand_
private condition_operand_ ::= (NULL|NULLS|ADDRESS OF identifier_|expression_arithmetic_)
private relational_operator_ ::= [IS] [NOT] (equals_|greater_|less_)
private equals_ ::= (EQUAL [TO]|EQUAL_SIGN_)
private greater_ ::= (GREATER than_or_equal_|GREATER_EQUAL_SIGN_|GREATER_SIGN_)
private less_ ::= (LESS than_or_equal_|LESS_EQUAL_SIGN_|LESS_SIGN_)
private than_or_equal_ ::= [THAN] [OR EQUAL [TO]]
private sign_condition_	::=  [IS] [NOT] (POSITIVE|NEGATIVE|ZERO)

private tallying_ ::= TALLYING {identifier_ FOR (CHARACTERS position_*|(ALL|LEADING) identifier_or_literal_ position_* )+}+
private replacing_::= REPLACING (CHARACTERS BY identifier_or_literal_ position_*|(ALL|LEADING|FIRST) {identifier_or_literal_ BY identifier_or_literal_ position_*}+)
private converting_ ::= CONVERTING identifier_or_literal_ TO identifier_or_literal_ position_*
private position_ ::= (BEFORE|AFTER) [INITIAL] identifier_or_literal_

private on_exception_ ::= [ON] (EXCEPTION|OVERFLOW) instruction_+
private on_not_on_ ::= on_exception_+ [NOT [ON] EXCEPTION instruction_+]
private invalid_key_clause_ ::= [INVALID [KEY]  instruction_+] [NOT INVALID [KEY] instruction_+]
private size_error_clause_ ::= [[ON] SIZE ERROR instruction_+] [NOT [ON] SIZE ERROR instruction_+]
private overflow_clause_ ::= [[ON] OVERFLOW instruction_+] [NOT [ON] OVERFLOW instruction_+]
private at_end_ ::= [[AT] END instruction_+] [NOT [AT] END instruction_+]
private using_ ::= USING identifier_+
private using2_ ::= USING ([ [BY] (REFERENCE|CONTENT|VALUE) ] identifier_+ )+
private using3_ ::= USING (identifier_or_literal_|OPAREN_SIGN_ expression_arithmetic_ CPAREN_SIGN_|OMITTED)+
private key_specifier_ ::= [ON] (ASCENDING|DESCENDING) [KEY] identifier_+
private collating_sequence_ ::= [COLLATING] SEQUENCE [IS] COBOLWORD
private output_specifier_ ::= (GIVING identifier_+|OUTPUT PROCEDURE [IS] paragraph_name_ (THROUGH|THRU) paragraph_name_)

private input_file_spec_ ::= file_name_ [[WITH] TIME LIMITS] [(SHARED|PROTECED|EXCLUSIVE)] [(SYNCDEPTH literal_|REVERSED|[WITH] NO REWIND)]
private output_file_spec_ ::= file_name_ [[WITH] TIME LIMITS] [(SHARED|PROTECED|EXCLUSIVE)] [(SYNCDEPTH literal_|[WITH] NO REWIND)]
private io_file_spec_ ::= file_name_ [[WITH] TIME LIMITS] [(SHARED|PROTECED|EXCLUSIVE)] [SYNCDEPTH literal_]
private extend_file_spec_ ::= io_file_spec_

private perform_procedure_ ::= procedure_group_ [test_site_] [perform_repetition_]
private perform_instructions_ ::= [test_site_] [perform_repetition_] instruction_+ END-PERFORM
private perform_repetition_ ::= (identifier_or_literal_ TIMES|UNTIL condition_|varying_phrase_ after_phrase_* )
private procedure_group_ ::= paragraph_name_ [(THROUGH|THRU) paragraph_name_]
private test_site_ ::= [WITH] TEST (BEFORE|AFTER)
private varying_phrase_ ::= VARYING identifier_ FROM identifier_or_literal_ BY identifier_or_literal_ UNTIL condition_
private after_phrase_ ::= AFTER identifier_ FROM identifier_or_literal_ BY identifier_or_literal_ UNTIL condition_

private search_all_ ::= [[AT] END instruction_] WHEN search_match_ (AND search_match_)* (instruction_|NEXT SENTENCE)
private search_match_ ::= identifier_ [[IS] (EQUAL_SIGN_|EQUAL [TO]) expression_arithmetic_]
private search_varying_ ::= VARYING identifier_ [[AT] END instruction_] {WHEN condition_ (instruction_|NEXT SENTENCE)}+

private sort_input_specifier_ ::= (USING file_name_+|INPUT PROCEDURE [IS] procedure_group_)
private sort_output_specifier_ ::= (GIVING file_name_+|OUTPUT PROCEDURE [IS] procedure_group_)

private time_limit_ ::= TIME LIMIT identifier_or_literal_
private key_phrase_ ::= KEY [IS]  key_relationship_ identifier_ [[(BEFORE|AFTER)] POSITION identifier_]
private key_relationship_ ::= {GREATER [THAN][OR EQUAL [TO]]|[NOT] (LESS [THAN]|LESS_SIGN_)|EQUAL [TO]|GREATER_SIGN_||EQUAL_SIGN_|GREATER_EQUAL_SIGN_}

private unstring_result_ ::= identifier_ [DELIMITER [IN] identifier_] [COUNT [IN] identifier_]
private advancing_clause_ ::= (AFTER|BEFORE) [ADVANCING] (PAGE|identifier_or_literal_ [(LINE|LINES)])
private end_of_page_clause_ ::= [[AT] (EOP|END-OF-PAGE) instruction_][[NOT][AT] (EOP|END-OF-PAGE) instruction_]

//*******************************
//Intrisic functions
//*******************************
intrisic_function_ ::= FUNCTION COBOLWORD [OPAREN_SIGN_ identifier_or_literal_+ CPAREN_SIGN_]
/** function names are not reserved words... TODO see how to handle this in way that it does not conflict with identifiers
intrisic_function_names_ ::= (CHAR
|CURRENT-DATE
|LOWER-CASE
|REVERSE
|UPPER-CASE
|WHEN-COMPILED
|ACOS
|ANNUITY
|ASIN
|ATAN
|COS
|LOG
|LOG10
|MEAN
|MEDIAN
|MIDRANGE
|NUMVAL
|NUMVAL-C
|PRESENT-VALUE
|RANDOM
|REM
|SIN
|SQRT
|STANDARD-DEVIATION
|TAN
|VARIANCE
|DATE-OF-INTEGER
|DAY-OF-INTEGER
|FACTORIAL
|INTEGER
|INTEGER-OF-DATE
|INTEGER-OF-DAY
|INTEGER-PART
|LENGTH
|MOD
|ORD
|ORD-MAX
|ORD-MIN
|TEST-NUMVAL
|TEST-NUMVAL-C
|MAX
|MIN
|RANGE
|SUM)
*/

//*******************************
//General tokens
paragraph_name_ ::= COBOLWORD
file_name_ ::= (GUARDIAN_FILE|COBOLWORD|DEFINE|STRING_LITERAL)
literal_ ::= [ALL] literal_values_
literal_values_ ::= (INTEGER_|NUMBER_|STRING_LITERAL|ZERO|ZEROS|ZEROES|SPACE|SPACES|
HIGH_VALUE|HIGH_VALUES|LOW_VALUE|LOW_VALUES|QUOTE|QUOTES|intrisic_function_)
cobolword_or_literal_ ::= (COBOLWORD|literal_)
identifier_ ::= COBOLWORD parent_identifier_* [subscript_]
identifier_or_literal_ ::= (identifier_|literal_)
parent_identifier_ ::= (OF|IN) COBOLWORD
subscript_ ::= OPAREN_SIGN_ expression_arithmetic_ [COLON_SIGN_ [expression_arithmetic_]] CPAREN_SIGN_
